


스프링 프레임워크, Spring Framework
- ooo 라이브러리
- ooo 프레임워크
- 개발자가 작업을 하는데 본인 주도하에 모든 통제 + 누군가가 만든 기능을 가져다 쓸수 있으면 -> 라이브러리
- 개발자가 작업을 하는데 본인 주도하긴하는데 미리정해준 툴(체계) 이 존재 -> 프레임워크(이미 체계가 다 잡혀있다고 보면 된다.)
- 스프링 프레임워크는 자바 플랫폼을 위한 "오픈소스" 애플리케이션 프레임워크이다.
- 전자정부 표준 프레임워크(정부 주도하에 개발환경을 통일시키려고 함 그때 채택한것이 스프링임 : 공공개발 프로젝트는 스프링기반으로 개발 그게 바로 전자정부 표준 프레임워크임.)
- 세팅된 개발 환경 제공(*** 매우 안정적이다) + 생산성이 높아진다.(반복되는 코드가 많이 사라진다.) + 개발 편의성 + 유지/보수성 높음. + 협업 + 대형화 프로젝트 도움이 많이된다.
- 2004년쯤 출시

Servlet/jsp - 사용자 주도 (자유도가 높음, 어수선함) : 재교육이 필요
Spring - 시스템 주도 (자유도가 낮음, 명확함) : 재교육이 필요없음


공식 홈페이지 : http://spring.io




스프링 프레임 워크 구성 요소
1. 의존성 주입 지원(DI)
2. 관점 지향 프로그래밍 지원(AOP)
3. Spring MVC 지원(이미 스프링에서 셋팅이 끝나있음. 기본적인 틀이 갖춰져있음. *** 가장 중요함)
4. 레이아웃 지원(Tiles)
5. 데이터베이스 프레임워크와 호환성 높음
	- JDBC 연동(원시)
	- Spring JDBC 지원(엄청 편해진다)
	- MyBatis 지원(jdbc 랑 비슷한 역할 수행)

스프링 선수 지식
1. Java -> oop
2. console or web 지식
3. XML 
	- 데이터를 저장하는 용도의 수준(= JSON 정도)
	- 스프링과 관련된 여러가지 설정 -> XML 형식으로 저장
	
스프링 개발 환경
- JDK + JRE
1. 이클립스 + 스프링 관련 라이브러리(*.jar)
2. 이클립스 + 플러그인(STS) : 쓰고 있는 이클립스에 플러그인 추가 -> eclipse.org 에서 제공해준다.
3. STS(이클립스 + 플러그인(STS)) : 처음부터 그냥 기능이 합쳐진 이클립스를 받는것 -> Spring.io 에서 제공해준다.


----------------------------------------------------------------------------------------


스프링 DI
- Dependency Injection
- 의존(성) 주입
- 디자인 패턴 중 하나.
- 프로그래밍에서 구성 요소간의 "의존 관계"(ex) Ex01 객체와 Util 객체의  관계)가 소스 내부가 아닌 외부 환경에 의해서 정의되게 하는 디자인 패턴
- 의존 객체의 생성을 누가 하느냐? 가 중요 

- 패키지 > com.test.spring.di.one

- 패키지 > com.test.spring.di.two 

- 패키지 > com.test.spring.di.three 

- 패키지 > com.test.spring.di.four 

- 패키지 > com.test.spring.di.five 

- 패키지 > com.test.spring.di.six 

- 패키지 > com.test.spring.di.seven


스프링
- DI, Dependency Injection : 의존주입
- IoC, Inversion of Control : 역제어 -> DI 를 하면 무조건 객체만드는 순서가 뒤바뀌게 되있다. 
     : 의존주입을 구현하게 되면 객체생성하는 순서가 역으로 뒤집혀지는데 그 현상을  IoC라고 부른다.
	 : 의존주입을 하게 되면 자연스럽게 발생하는 현상.


AOP, Aspect Oriented Programing
- 관점 지향 프로그래밍
- 생산성 & 유지보수 향상을 위한 기법.
- 주 업무와 보조 업무를 분리시켜 각각의 업무를 효율적으로 관리하는 기법
- 코드 > 목적(주 업무 & 보조업무)에 맞게 잘 분리됨.
- 사이사이에 업무를 삽입해준다.

AOP 용어(기억해야하는 용어)
1. Core Concern
	- 주 업무(메인 업무)
	
2. Cross-cutting Concern
	- 보조 업무
3. Advice
	- 보조 업무가 주 업무 실행 시기 중 어느 시점에 개입해서 실행할지에 대한 규칙을 말함.
	a. Before
		- 주업무를 실행하기 전에 보조 업무를 먼저 실행하라는 규칙
	b. After
	c. Around
	d. After-returning
	e. After-throwing















